@page "/hotel-amenity"
@*@attribute [Authorize]*@
@using BlazorApp.Service
@using BlazorApp.Service.IService
@using Models
@using BlazorApp.Data

@using Business.Repository
@using Business.Repository.IRepository
@inject IJSRuntime JSruntime
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider



@inject NavigationManager NavigationManager
@inject IHotelAmenityRepository HotelAmenityRepository
@inject BlazorApp.Service.IService.IHotelAmenityService _hotelAmenityService
@inject TokenProvider TokenProvider

<PageTitle>Amenity</PageTitle>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-info "> Hotel Amenity</h4>

    </div>
    <div class="col-2 offset-4">
        <NavLink href ="@($"hotel-amenity/create")" class="btn btn-info form-control">Add New Amenity </NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Timing</th>
                    <th>
                        Icon
                    </th>

                 

                </tr>
            </thead>
            <tbody>
                @if (HotelAmenity.Any())
                {
                    foreach(var amenity in HotelAmenity)
                    {
                        <tr>
                       
                        <td>@amenity.Name</td>
                        <td>@amenity.Timing</td>
                        <td><i class="@amenity.IconStyle"></i></td>
                      
                       
                        <td>
                           
                             <NavLink href="@($"hotel-amenity/edit/{amenity.Id}")" class="btn btn-primary">Edit</NavLink> 
                            <button class="btn btn-danger btn" @onclick="()=>HandleDelete(amenity.Id)">Delete</button>
                             
                        </td>
                        </tr>
                    }
                        
                        

                }
                else
                {
                    <div class="spinner"></div>
                    @*<tr colspan>No records found</tr>*@
                }
            </tbody>
        </table>
        
    </div>
</div>
<DeleteConfirmationComp isParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmationComp>




@code {
    public string Id { get; set; }
    private IEnumerable<HotelAmenityDT> HotelAmenity { get; set; } = new List<HotelAmenityDT>();
    private string? DeleteAmenityId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

     private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        //HotelAmenity = await hotelAmenityService.GetAllHotelAmenities());

        HotelAmenity = await _hotelAmenityService.GetAllHotelAmenity(TokenProvider.AccessToken);
    }


    private async Task HandleDelete(string amenityId)
    {
        DeleteAmenityId = amenityId;
        await JSruntime.InvokeVoidAsync("showDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if(isConfirmed && DeleteAmenityId != null)
        {
            try
            {
                var result = await _hotelAmenityService.DeleteHotelAmenity(DeleteAmenityId);
                await JSruntime.ToastrSuccess("Hotel amenity deleted successfully");
            }
            catch (Exception e)
            {
                await JSruntime.ToastError(e.Message);
            }
            HotelAmenity = await _hotelAmenityService.GetAllHotelAmenity(TokenProvider.AccessToken);

        }
         await JSruntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;

    }
}
