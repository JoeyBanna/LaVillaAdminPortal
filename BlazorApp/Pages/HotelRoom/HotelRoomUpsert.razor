@page "/hotel-room/create"
@page "/hotel-room/edit/{Id}"
@using BlazorApp.ModelsModels
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using Business.Repository.IRepository
@using BlazorApp.Models
@using BlazorApp.Service.IService
@using System.Drawing
@using global::Models
@inject IHotelRoomImagesRepository HotelRoomImageRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUPload
@inject BlazorApp.Service.IHotelRoomService _hotelRoomService
@inject BlazorApp.Service.IService.IHotelRoomImageService _hotelImageService

<PageTitle> Hotel Room</PageTitle>

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Model Room</h3>
      
    <div class="col-md-12">
        <div class="card">
           
            <div class="card-body">
                <EditForm Model="createHotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary />*@
                    <div class="form-group">
                        <label>Villa Name <strong class="text-danger">*</strong> </label>
                        <InputText @bind-Value="createHotelRoomModel.name" class="form-control"></InputText>
                        <ValidationMessage For="()=>createHotelRoomModel.name"></ValidationMessage>
                    </div>
                   @* @if(Title == "Update")
                    {
                         <div class="form-group mt-4 ">
                    <label for ="roomtype" class="col-sm-3">Room Types</label>
                    <InputSelect id="roomtype" @bind-Value="roomTypes" class="form-control">
                                @foreach(var item in roomTypes)
                                {
                                    string vol = item.name;
                                   <option value=@item.id>@item.name</option>
                                }
                    </InputSelect>
                  
                </div>
                    }*@
                    <div class="form-group">
                        <label>Occupancy <strong class="text-danger">*</strong> </label>
                        <InputNumber @bind-Value="createHotelRoomModel.occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>createHotelRoomModel.occupancy"></ValidationMessage>
                    </div> 
                    @if(Title == "Update")
                    {
                         <div class="form-group">
                       <MudSelect T="string" Label="Room Types " Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"  Required="true">
                            @foreach(var item in roomTypes)
                                {
                                <MudSelectItem Value="@item.name" />
                                roomTypeId =item.id;
                            }
                          
                        </MudSelect>
                    </div>
                    }
                   
                    <div class="form-group">
                        <label>Rate <strong class="text-danger">*</strong> </label>
                        <InputNumber @bind-Value="createHotelRoomModel.regularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>createHotelRoomModel.regularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Room-Size <strong class="text-danger">*</strong> </label>
                        <InputSelect id="roomsize" @bind-Value="createHotelRoomModel.sqFt" class="form-control">
                        <option value="">---</option>
                        <option>45 Sqm</option>
                        <option>50 sqm</option>
                        <option>55 sqm</option>
                        <option>60 sqm</option>
                        <option>65 sqm</option>
                        <option>70 sqm</option>
                        <option>75 sqm</option>
                        <option>80 sqm</option>
                        <option>85 sqm</option>
                        <option>90 sqm</option>
                        <option>95 sqm</option>
                        <option>100 sqm</option>
                        </InputSelect>
                      
                        
                    </div>
                    <div class="form-group" style="height:250px ">
                        <label>Details <strong class="text-danger">*</strong></label>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                                @*  <h4>This Toolbar works with HTML</h4>
                                    <a href="http://BlazorHelpWebsite.com">
                                    BlazorHelpWebsite.com</a>*@
                            </EditorContent>
                        </BlazoredTextEditor>
                    </div>
                    <div>
                        
                    </div>
                    <div class="form-group" style="padding-top:100px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                          
                        
                        <div class="row">
                            @if (IsImageUploadProcesssStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i> Please wait ... Images are loading </span>
                                </div>
                            }
                            @if ( HotelRoomModel.ImageUrls != null && createHotelRoomModel.hotelRoomImages.Count > 0)
                                
                           {
                                    int serial = 1;
                                    foreach (var roomImage in HotelRoomModel.ImageUrls)
                                    {
                                        if(Title == "Create")
                                        {
                                            <div class="col-md-2 mt-3" >
                                                <div class="@_HoverImageCSSClass" @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver" >
                                                     <img src="data:image/jpg;base64,@roomImage" width="170" height="150"  >
                                                     @*<img src="@roomImage" style="background-image" width="170" height="150" >*@
                                                     
                                                </div>
                                               
                                                <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                                    Delete
                                              </button>
                                              
                                        </div>
                                        serial++;
                                    }
                                    else
                                    {
                                        if(Title == "Update" && roomImage == pathForImage)
                                        {
                                            <div class="col-md-2 mt-3">
                                                     <div class="@_HoverImageCSSClass" @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver">
                                                        <img src="data:image/jpg;base64,@roomImage" width="170" height="150" >
                                                      </div>
                                                     <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                                            Delete
                                                     </button>
                                            </div>

                                        }
                                        else
                                        {
                                           var check =  roomImage.StartsWith("https");

                                            if(!roomImage.Equals(pathForImage) && check == true && Title == "Update")
                                            {
                                                   
                                                <div class="col-md-2 mt-3">
                                                    <div class="@_HoverImageCSSClass" @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver">
                                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                                        </div>
                                                    </div>
                                                
                                               <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                                    Delete
                                              </button>
                                                </div>
                                            }
                                            else
                                            {
                                               var nextIn =  roomImage.Count();
                                                var inde = roomImage[0];
                                                if(!roomImage.Equals(pathForImage) && inde >  0 && check == false && Title == "Update")
                                                {
                                                        
                                                 <div class="col-md-2 mt-3">
                                                     <div class="@_HoverImageCSSClass" @onmouseout="@OnMouseOut" @onmouseover="@OnMouseOver">
                                                        <img src="data:image/jpg;base64,@roomImage" width="170" height="150" >
                                                      </div>
                                                     <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                                            Delete
                                                     </button>
                                            </div>
                                                    inde++;
                                                }
                                            }


                                        }

                                        }
                                    }
                           }
                        </div>
                    </div>
                   
                    <br />
                    @if(createHotelRoomModel.regularRate == 0 || createHotelRoomModel.occupancy == 0  || String.IsNullOrWhiteSpace(createHotelRoomModel.sqFt) && createHotelRoomModel.details== null)
                    {
                        <div class="form-group">
                        <button class="btn btn-info" disabled>@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                        </div>
                    }
                    else
                    {
                        
                         <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                        
                    }
                   
                </EditForm>
            </div>
             <MudAlert Severity="Severity.Info" Class="mt-3 mud-width-full" Style="max-width:250px;" Elevation="25"> (*) Required Fields</MudAlert>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string? Id { get; set; }
    private CreateHotelRoomModel createHotelRoomModel { get; set; } = new CreateHotelRoomModel();
    private HotelRoomDT HotelRoomModel { get; set; } = new HotelRoomDT();
    private UpdateHotelRoomModel updateHotelRoomDTO { get; set; } = new UpdateHotelRoomModel();
    public string Name { get; set; }
    private string Title { get; set; } = "Create";
    private HotelRoomImageDT RoomImage { get; set; } = new HotelRoomImageDT();
    private List<string> DeleteImagesNames { get; set; } = new List<string>();
    private bool IsImageUploadProcesssStarted { get; set; } = false;
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    public List<string> pics { get; set; } = new List<string>();
    public string pathForImage { get; set; }
    public IEnumerable<RoomTypes> roomTypes{ get; set; } = new List <RoomTypes>();
    public RoomTypes GetRoomTypes { get; set; } = new RoomTypes();
    private string? roomTypeId { get; set; } 
    public System.Drawing.Size Size { get; }


    protected override async Task OnInitializedAsync()
    {

        if (Id != null)
        {
            Title = "Update";

            HotelRoomModel = await _hotelRoomService.GetHotelRoomById(Id);
            roomTypes =  await _hotelRoomService.GetRoomTypes();
           
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.roomImage).ToList();
            }

            createHotelRoomModel = new CreateHotelRoomModel()
                {
                    details=HotelRoomModel.details,
                    name = HotelRoomModel.name,
                    hotelRoomImages = HotelRoomModel.HotelRoomImages,
                    occupancy= HotelRoomModel.occupancy,
                    regularRate=HotelRoomModel.regularRate,
                    sqFt=HotelRoomModel.sqFt
        };

        }
        else
        {
            HotelRoomModel = new HotelRoomDT();
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {

                if (!string.IsNullOrEmpty(HotelRoomModel.details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }

       
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            Title = "Update";
            if (Id != null && Title == "Update")
            {

                HotelRoomModel.details = await QuillHtml.GetHTML();
                //update
                createHotelRoomModel.Id = Id;
                foreach (var item in createHotelRoomModel.hotelRoomImages)
                {
                    item.roomId=Guid.NewGuid().ToString();
                }
                createHotelRoomModel.roomTypeId = roomTypeId;
                var updateRoomResult = await _hotelRoomService.UpdateHotelRoom(Id, createHotelRoomModel);
                var response = updateRoomResult;
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) ||
                (DeleteImagesNames != null && DeleteImagesNames.Any()));
                {
                    if (DeleteImagesNames != null && DeleteImagesNames.Any())
                    {
                        foreach (var deletedImageName in DeleteImagesNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                            var result = FileUPload.DeleteFile(imageName);
                           
                            await HotelRoomImageRepository.DeleteHotelImageByImageURL(deletedImageName);

                        }
                    }
                }
                await JsRuntime.ToastrSuccess("Hotel room successfully updated.");
            }
            else
            {
                if (createHotelRoomModel.name == Name )
                {
                    await JsRuntime.ToastError("Hotel room name already exist");
                    return;
                }
                else
                {
                    //create
                    Title = "Create";
                    createHotelRoomModel.details = await QuillHtml.GetHTML();

                    var createdResult = await _hotelRoomService.CreateHotelRoomModel(createHotelRoomModel);

                    var response = createdResult;
                 

                    await JsRuntime.ToastrSuccess("Hotel room successfully created.");

                }

            }
        }
        catch (Exception ex)
        {

        }


        NavigationManager.NavigateTo("hotel-room");
    }
    
    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var index = HotelRoomModel.HotelRoomImages.FindIndex(x => x.roomImage == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.id == null && Title == "create")
            {
                var result = FileUPload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeleteImagesNames ??= new List<string>();
                DeleteImagesNames.Add(imageUrl);
            }

            HotelRoomModel.ImageUrls.Remove(imageUrl);
            HotelRoomModel.HotelRoomImages.RemoveAt(imageIndex);

        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);

        }
    }

    private async Task<string> ImageToBase64(string image)
    {

        try {

            byte[] imgdata = System.IO.File.ReadAllBytes(image);

            var base64String = Convert.ToBase64String(imgdata);

            return base64String;
        } catch(Exception ex)
        {
            throw ex;
        }


        //string _base64String = null;

        //using (System.Drawing.Image _image = System.Drawing.Image.FromFile(_imagePath))
        //{
        //    using (MemoryStream _mStream = new MemoryStream())
        //    {
        //        _image.Save(_mStream, _image.RawFormat);
        //        byte[] _imageBytes = _mStream.ToArray();
        //        _base64String = Convert.ToBase64String(_imageBytes);
        //        pathForImage = _base64String;
        //        return //"data:image/jpg;base64," + 
        //        _base64String;
        //    }
        //}
    }


    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {

        IsImageUploadProcesssStarted = true;
        try
        {
            var images = new List<string>();
            var converted = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {

                var maxFiles = 5;
                var maxSize = 512000000;

                foreach (var file in e.GetMultipleFiles())
                {
                    //using (Stream memStream = new MemoryStream(bytes))
                    //  {
                    //    using (Image img = System.Drawing.Image.FromStream(memStream))
                    //    {
                    //      int width = img.Width;
                    //      int height = img.Height;
                    //    }
                    //  }
                    //var name =  file.GetType().FullName;
                    var format = file.ContentType;
                    var image = await file.RequestImageFileAsync(format, 250, 250);
                    var buffer = new byte[image.Size];
                    await image.OpenReadStream(maxAllowedSize: maxSize).ReadAsync(buffer);
                  

                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        //var uploadedImagePath = await FileUPload.uploadFile(file);
                        //var b64string = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
                        var b64string = Convert.ToBase64String(buffer);
                        //var b64string = await ImageToBase64(fileInfo.FullName);
                        pathForImage = b64string;
                        images.Add(b64string);                       
                    }
                    else
                    {
                        await JsRuntime.ToastError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    foreach (var image in images)
                    {
                        createHotelRoomModel.hotelRoomImages.Add(new HotelRoomImage()
                            {
                                roomImage = image
                            });

                    }
                    HotelRoomModel.HotelRoomImages = createHotelRoomModel.hotelRoomImages;
                    //HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.roomImage).ToList();

                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);

                    }
                    
                
                }
                else
                {
                    await JsRuntime.ToastError("Failed to upload image.");
                    
                    return;
                }

            }
            IsImageUploadProcesssStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }

    }

    //enlarge image on hover
     bool _IsHovering = false;
    string _HoverImageCSSClass = "";

    protected void OnMouseOver(MouseEventArgs mouseEvent)
    {

        if (!_IsHovering)
        {
            _IsHovering = true;
            _HoverImageCSSClass = "hovering";
            StateHasChanged();
        }
    }

    protected void OnMouseOut(MouseEventArgs mouseEvent)
    {
        _HoverImageCSSClass = "";
        _IsHovering = false;
        StateHasChanged();
    }
}

  
     

