@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IJSRuntime JsRuntime 
@using BlazorApp.Service.IService
@inject IHotelAmenityRepository HotelAmenityRepository
@inject NavigationManager NavigationManager
@inject BlazorApp.Service.IService.IHotelAmenityService _hotelAmenityService


@using BlazorApp.Models
@using Business.Repository
@using Business.Repository.IRepository
@using DataAccess.Data

<PageTitle>Amenity</PageTitle>
<div class="row mt-3 mb-2">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Amenity </h3>
     <MudAlert Severity="Severity.Info" Class="mt-3 mud-width-full" Style="max-width:250px; margin-left:19px" Elevation="25"> (*) Required Fields</MudAlert>
    <div class="col-md-12">
       <div class="card">
          <div class="card-body">
              <EditForm Model="hotelAmenityDTOModel" OnValidSubmit="HandleHotelAmenityUpsert ">
                   <DataAnnotationsValidator />
                     @*<ValidationSummary />*@
                  <div class="form-group">
                        <label>Amenity Name <strong class="text-danger">*</strong></label>
                        <InputText @bind-Value="hotelAmenityDTOModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>hotelAmenityDTOModel.Name"></ValidationMessage>
                </div>
                 <div class="form-group mt-4">
                    <label>Description <strong class="text-danger">*</strong></label>
                    <InputText @bind-Value="hotelAmenityDTOModel.Description" class="form-control"></InputText>
                     <ValidationMessage For="()=>hotelAmenityDTOModel.Description"></ValidationMessage>
                </div>
                <div class="form-group mt-4 ">
                    <label>Duration <strong class="text-danger">*</strong></label>
                    <InputText @bind-Value="hotelAmenityDTOModel.Timing" class="form-control"></InputText>
                    <ValidationMessage For="()=>hotelAmenityDTOModel.Timing"></ValidationMessage>
                </div>
                 <div class="form-group mt-4 ">
                    <label for ="icon" class="col-sm-3">Icon <strong class="text-danger">*</strong></label>
                    <InputSelect id="icon" @bind-Value="hotelAmenityDTOModel.IconStyle" class="form-control">
                        <option value="">---</option>
                        <option>fas fa-gamepad</option>
                        <option>fas fa-dumbbell</option>
                        <option>fas fa-biking</option>
                        <option>fas fa-ambulance</option>
                        <option>fas fa-bus</option>
                        <option>fas fa-horse</option>
                        <option>fas fa-wifi</option>
                        <option>fas fa-campground</option>
                        <option>fas fa-swimming-pool</option>
                        
                    </InputSelect>
                    <ValidationMessage For="()=>hotelAmenityDTOModel.IconStyle"></ValidationMessage>
                </div>

                  <br />

                  
                  @if(hotelAmenityDTOModel.IconStyle == null ||  String.IsNullOrEmpty(hotelAmenityDTOModel.Description) && String.IsNullOrEmpty(hotelAmenityDTOModel.Timing))
                    {
                             <div>
                         <button class="btn btn-info" role="button" aria-pressed="true" disabled>@Title Amenity</button>
                         <NavLink href="hotel-amenity" class="btn btn-secondary">Back to Index</NavLink>
                        </div>
                    }
                    
                    else
                    {
                     <div class="form-group">
                        <button class="btn btn-primary">@Title Amenity</button>
                        <NavLink href="hotel-amenity" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                        
                    }
                 
              </EditForm>
               
         </div>
      </div>
    </div>
</div>






@code
{
    [Parameter]
    public string? Id { get; set; } 

    public string Name { get; set; }

    public string Title { get; set; } = "Create";

    internal bool IsProcessingStart { get; set; } = false;

    private HotelAmenityDT hotelAmenityDTOModel { get; set; } = new HotelAmenityDT();

    public bool description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //we work with update
            Title = "Update";

            hotelAmenityDTOModel = await _hotelAmenityService.GetHotelAmenity(Id);
        }
        else
        {
            hotelAmenityDTOModel = new HotelAmenityDT();
        }
    }




    private async Task HandleHotelAmenityUpsert()
    {

        try
        {
            //Update
            Title = "Update";
            if (!String.IsNullOrEmpty(Id)  )
            {



                if (Name == hotelAmenityDTOModel.Name)
                {
                    await JsRuntime.ToastError("Hotel amenity already exist");
                    return;
                }
                hotelAmenityDTOModel.Id = Id;
                var updateRoomResult = await _hotelAmenityService.UpdateHotelAmenity(Id, hotelAmenityDTOModel);
                await JsRuntime.ToastrSuccess("Hotel room successfully updated.");

            }
            //Create
            else
            {
                Title = "Create";

                if(Title == "Create" && hotelAmenityDTOModel.Id == null)
                {
                     var createdAmenityResult = await _hotelAmenityService.CreateHotelAmenity(hotelAmenityDTOModel);
                
                }
                await JsRuntime.ToastrSuccess("Hotel amenity successfully created.");
            }
               
        }
        catch(Exception ex)
        {
           

        }
        NavigationManager.NavigateTo("hotel-amenity");
            IsProcessingStart = false;
    
    }
    
}