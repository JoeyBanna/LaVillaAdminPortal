@page "/booking"
@*@attribute [Authorize]*@
@using BlazorApp.Helper
@using BlazorApp.Service
@using BlazorApp.Service.IService
@using Microsoft.JSInterop
@using Models
@using BlazorApp.Data
@using Business.Repository
@using Business.Repository.IRepository
@inject IJSRuntime JSruntime
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@inject BlazorApp.Service.IService.ICustomerBookingService customerBookingServ
@inject TokenProvider TokenProvider


<PageTitle>Booking Report</PageTitle>


<MudTable Items="@customerBookings" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<CustomerBooking,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Bookings</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Customer Name</MudTh>
        <MudTh>Mobile</MudTh>
        <MudTh>Check In Date</MudTh>
        <MudTh>Days Booked</MudTh>
        <MudTh>CheckOut</MudTh>
        <MudTh>Paid Amount</MudTh>
    </HeaderContent>
    <RowTemplate>
        @if (customerBookings.Any())
        {
             <MudTd DataLabel="Customer Name">@context.customerName</MudTd>
        <MudTd DataLabel="Mobile">@context.customerMobile</MudTd>
        <MudTd DataLabel="Check In Date">@context.checkedInAt.ToString("dd MMMM yyyy")</MudTd>
        <MudTd DataLabel="Days Booked">@context.daysBooked</MudTd>
        <MudTd DataLabel="CheckOut">@context.checkOutAt.ToString("dd MMMM yyyy")</MudTd>
        <MudTd DataLabel="Paid Amount">@context.amountPaid.ToString("c3")</MudTd>
        <MudTd DataLabel="button">
               <NavLink href="@($"booking-Id/{context.id}")" class="btn btn-primary">View</NavLink> 
                            
          </MudTd>
        }
        else
        {
             <div class="spinner"></div>
            
        }

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>





@code {
    public string Id { get; set; }
    private IEnumerable<CustomerBooking> customerBookings { get; set; } = new List<CustomerBooking>();
    private string? DeleteBookingId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;
    public string customerID { get; set; }
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private CustomerBooking selectedItem1;


    

    


    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        customerBookings = await customerBookingServ.getAllBooking();
    }



    private bool FilterFunc1(CustomerBooking element) => FilterFunc(element, searchString1);




    private bool FilterFunc(CustomerBooking element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.customerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.customerMobile.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.amountPaid} {element.checkInDate} {element.daysBooked}".Contains(searchString))
            return true;
        return false;
    }

   
    
 }
