@page "/notificationpage"

@using BlazorApp.Models
@using BlazorApp.ModelsModels
@inject BlazorApp.Service.IService.INotificationService notification
@using System.Net.Http.Json

@inject HttpClient httpClient

<MudTable Items="@notify" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<Notifications,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Booking Notification</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Message</MudTh>
  
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.title</MudTd>
        <NavLink  href="@($"booking-Id/{context.hotelBookingId}/{context.id}")" >
            <MudTd DataLabel="Sign">@context.message</MudTd>
        </NavLink>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>



@code {
    [Parameter]
    public string? Id{ get; set; }
    private IEnumerable<Notifications> notify { get; set; } = new List <Notifications>();
    private Notifications notifiable { get; set; } = new Notifications();
    private NotificationReadResponse notificationReadResponse { get; set; } = new NotificationReadResponse();
    private int countdown = 1000;
    bool fixed_header = true;
    bool fixed_footer = false;


    protected override async Task OnInitializedAsync()
    {
        notify = await notification.getNotification();
    }
    
    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();

    //    Task.Run(async() =>
    //    {
    //        while (countdown > 0)
    //        {
    //            countdown--;
    //            StateHasChanged();
    //            await Task.Delay(1000);
    //        }
    //    });
    //}
    //public async Task handleNotifyUpdate()
    //{
        
    //    await notification.Updatenotifications(Id, notificationReadResponse);
    //}

    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private Notifications selectedItem1;

      private bool FilterFunc1(Notifications element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Notifications element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.message.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
}
