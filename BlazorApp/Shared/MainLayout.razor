@using BlazorApp.ModelsModels
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor
@using System.Security.Claims
@inject NavigationManager _navigationManager
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar _snackBar
@inject BlazorApp.Service.IService.INotificationService notification

 <MudThemeProvider/>
 <MudDialogProvider/>
 <MudSnackbarProvider/>

<PageTitle>LaVillaAdmin</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <span>
             
        </span>
       <MudLayout>
          @* Cross Bar*@  

           <MudAppBar Color="MudBlazor.Color.Primary" Fixed="false"  Elevation="0">

             @*  Add badge*@ 

               <MudSpacer />
                    <div Class="d-flex justify-space-around flex-wrap " style = "margin-top: 1px !important;" >
                    @{
                      var unreadCount =  notify.Where(x => x.readStatus == false).Count();
                    }
                        @foreach( var item in notify)
                        {
                        @*var useage = item.readStatus;
                            arr.Add(useage);
                        serial = arr.Count(v => v == false);*@
                        serial = notify.Count();

                        }
                        @if(unreadCount > 0){
                            
                              <MudBadge Content="@unreadCount" Overlap="true" Class="mx-6 my-4" Color="Color.Warning">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default"  />
                        </MudBadge>

                        }
                        else{
                             <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default"  />
                             }
                    </div>
               
               <AuthorizeView>
                   <Authorized>
                       
                      <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
                      <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Dark Mode"/>
                       <a class="nav-link alert-dark id="login" href="logout">Log out</a>
                      <h3>@UserName</h3>
                   </Authorized>
               </AuthorizeView>
               
            </MudAppBar>
          
                      <MudMainContent >
               <MudContainer MaxWidth="MaxWidth.Large">
                    @Body
               </MudContainer>
               
           </MudMainContent>
    
    
       </MudLayout>
    </main>
</div>


@code{
    bool _drawerOpen = true;
    private MudTheme _theme = new();
    private bool _isDarkMode;
    private IEnumerable<Notifications> notify { get; set; } = new List <Notifications>();
    private int serial { get; set; }
    private MyBackGroundService backGroundService;

    private int countdown = 1000;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private bool collapseNavMenu = true;

    //Navbar toggle
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    public string UserName;


    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name;
        notify = await notification.getNotification();

    }



    private async Task GetClaimsPrincipal()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = user.Identity.Name;
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    
  
  
    

    

}
