@using MudBlazor
@using System.Security.Claims
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

 <MudThemeProvider/>
 <MudDialogProvider/>
 <MudSnackbarProvider/>

<PageTitle>LaVillaAdmin</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        
       <MudLayout>
           
           <MudAppBar Color="MudBlazor.Color.Primary" Fixed="false"  Elevation="0">
               <MudSpacer />
               @*<LoginDisplay></LoginDisplay>*@
               <a class="nav-link text-dark" id="register" href="/Identity/Account/Register">Register</a>
               <AuthorizeView>
                   <Authorized>
                       
                      <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>
                      <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode"/>
                       <a class="nav-link alert-dark id="login" href="logout">Log out</a>
                      <h3>@UserName</h3>
                   </Authorized>
               </AuthorizeView>
               



               @*<MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />*@
                @*<div class="top-row px-4">
            <LoginDisplay /> 
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            
        </div>*@
            </MudAppBar>
     
           @*<MudDrawer @bind-Open="@_drawerOpen">
               <MyNavMenu/>
           </MudDrawer>*@
           <MudMainContent>
               <MudContainer MaxWidth="MaxWidth.Large">
                    @Body
               </MudContainer>
               
           </MudMainContent>
       </MudLayout>
       @* <article class="content px-4">
           
        </article>*@
    </main>
</div>


@code{
    bool _drawerOpen = true;
    private MudTheme _theme = new();
    private bool _isDarkMode;
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    public string UserName;

    protected override async Task OnInitializedAsync()
    {
        UserName = httpContextAccessor.HttpContext.User.Identity.Name;
    }

    private async Task GetClaimsPrincipal()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = user.Identity.Name;
            _claims = user.Claims;
            _surnameMessage = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    

    

}
